@layout('layout.admin')

@section('head')

{{ style('css/leaflet.css') }}
{{ style('css/leaflet.pm.css') }}
{{ script('js/leaflet.js') }}
{{ script('js/leaflet.pm.min.js') }}

@endsection

@section('content')
<h2 id="judul_form">Tambah Item Peta Baru</h2>
<form name="form" class="w3-margin" method="POST" onsubmit="beforeSaveItem()" action="{{ route('PetaController.index') }}">
  {{ csrfField() }}
  <p>
    <label>Nama Item Peta</label>
    <input type="text" class="w3-input w3-border" name="nm_item" />
  </p>
  
  <p>
  <label>Kategori Item</label>
  <select class="w3-select w3-border" name="kategori_item">
    @each(kitem in kategori_item)
      <option value="{{ kitem.id_kitem }}">{{ kitem.nm_kitem }}</option>
    @endeach
  </select>
  </p>
  
  @if(!detail.id_item)
    <p>
    <label>Jenis Item</label>
    <select class="w3-select w3-border" name="tipe_item">
      @each(titem in tipe_item)
        <option value="{{ titem.id_titem }}">{{ titem.nm_titem }}</option>
      @endeach
    </select>
    </p>
  @endif
  
  <p>
    <label>Item Peta (Klik ikon sebelah kanan atas pada peta)</label>
    <div id="peta" style="width:100%; height:300px;"></div>
  </p>
  <p>
    <label>Informasi Item</label>
    <div id="info_item"></div>
  </p>
  <p>
    <label>Style Item</label>
    <div id="style_item"></div>
  </p>
    <input type="hidden" type="text" name="geojson" />
  <p>
    <button class="w3-btn w3-blue-grey">Simpan</button>
    <button type="button" class="w3-btn w3-blue" onclick="previewItemStyle()">Preview Style</button>
  </p>
</form>

<script>

// Variable
var currentItemObject = null;

// Inisialisasi Peta
var map = L.map('peta').setView([-0.502106, 117.153709], 5);
L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoiZWdvZGFzYSIsImEiOiJjamd4NWkyMmwwNms2MnhsamJvaWQ3NGZmIn0.6ok1IiPZ0sPNXmiIe-iEWA', {
  attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, ' +
                '<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
                'Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
  id: 'mapbox.streets',
  noWrap: false
}).addTo(map);

// Method

function previewItemStyle(){
 if(currentItemObject){
  var style = inputToObject(document.getElementsByName("style_keys"), document.getElementsByName("style_value"));
  style.iconSize = [41, 41]
  if(currentItemName == "Marker"){
    if(style.iconUrl != ""){
      currentItemObject.setIcon(L.icon(style))
    }
  }else{
    currentItemObject.setStyle(style)
  }
 } 
}

function getSelectedText(dom){
  return dom.options[dom.selectedIndex].text;
}

function objectToInput(o, input_name, input_value, head1, head2, table_id, delete_able = true){
  var keys = Object.keys(o);
  var l = keys.length;
  var table = document.createElement("table");
  table.setAttribute("class", "w3-table-all");
  table.setAttribute("id", table_id);
  
  var thead = table.insertRow(0);
  thead.setAttribute("class", "w3-teal")
  
  var thead1 = thead.insertCell();
  thead1.innerHTML = head1
  
  var thead2 = thead.insertCell();
  thead2.innerHTML = head2
  
  if(delete_able){
    var thead3 = thead.insertCell();
    thead3.innerHTML = "Aksi"
  }
  
  // method untuk menambah row
  function addRow(name1, val1, name2, val2, index = -1){
    var tcontent = table.insertRow(index);
    
    var tcontent1 = tcontent.insertCell();
    tcontent1.innerHTML = '<input type="text" name="' + name1 + '" value="' + val1 + '" class="w3-input w3-border" />';
    
    var tcontent2 = tcontent.insertCell();
    tcontent2.innerHTML = '<input type="text" name="' + name2 + '" value="' + val2 + '" class="w3-input w3-border" />';
    
    if(delete_able){
      var tcontent3 = tcontent.insertCell();
      var button = document.createElement("button")
      button.innerHTML = " X "
      button.setAttribute("type", "button")
      button.setAttribute("class", "w3-btn w3-small w3-red")
      button.onclick = function(){
        var i = this.parentNode.parentNode;
        var k = i.rowIndex;
        i.parentNode.parentNode.deleteRow(k);
      }
      tcontent3.appendChild(button);
    }
  }
  
  for(var x = 0; x < l; x++){
    addRow(input_name, keys[x], input_value, o[keys[x]])
  }
  
  if(delete_able){
    var cellCount = table.rows[0].cells.length;
  
    var addRowButton = document.createElement("button")
    addRowButton.setAttribute("class", "w3-btn w3-small w3-teal")
    addRowButton.setAttribute("type", "button")
    addRowButton.innerHTML = " <b> Baris Baru </b>"
    
    var tcontent4 = table.insertRow()
  
    var tcontent41 = tcontent4.insertCell()
    tcontent41.setAttribute("colspan", cellCount)
    tcontent41.appendChild(addRowButton)
    
    addRowButton.onclick = function(){
      addRow(input_name, "Nama", input_value, "Nilai", table.rows.length - 1)
    }
  }
  
  return table
}


// Parse 2 input yang bersebelahan menjadi object json
// Nama input harus sama
// @param name (DOM input): object untuk input nama
// @param value (DOM input): object untuk input nilai object
function inputToObject(name, value){
  var result = {}
  var lname = name.length
  for(var x = 0; x < lname; x++){
    if(name[x].value != "" && name[x].name != ""){
      result[name[x].value] = value[x].value
    }
  }
  return result;
}

// penggabungan nilai informasi item ke geojson agar jadi satu geojson
function beforeSaveItem(){
  var geojson = currentItemObject.toGeoJSON();
  geojson.properties = {
    detail: inputToObject(document.getElementsByName("info_keys"), document.getElementsByName("info_value")),
    style: inputToObject(document.getElementsByName("style_keys"), document.getElementsByName("style_value"))
  }
  
  //Jika item lingkaran, maka tambah radius di properties
  if(currentItemName == "Circle"){
    geojson.properties.radius = currentItemObject.getRadius()
  }
  document.getElementsByName("geojson")[0].value = JSON.stringify(geojson)
}
function switchItemDrawer(name, edit_mode = false, editable = true){
  currentItemName = name;
  
  map.pm.removeControls();
  var options = {
    position: 'topright', // toolbar position, options are 'topleft', 'topright', 'bottomleft', 'bottomright'
    drawMarker: false, // adds button to draw markers
    drawPolyline: false, // adds button to draw a polyline
    drawRectangle: false, // adds button to draw a rectangle
    drawPolygon: false, // adds button to draw a polygon
    drawCircle: false, // adds button to draw a cricle
    cutPolygon: false, // adds button to cut a hole in a polygon
    editMode: editable, // adds button to toggle edit mode for all layers
    removalMode: !edit_mode, // adds a button to remove layers
  };
  // Jika edit_mode = true, maka name diubah ke null agar item peta tidak bisa ditambah, melainkan hanya diedit
  if(!edit_mode){
    var item_style = {{ el(toJSON(tipe_item)) }}
    
    // Form style default diterapkan
    for(var x = 0; x < item_style.length; x++){
      if(item_style[x].nm_titem == name){
        // Membuat form style item
        document.getElementById('style_item').innerHTML = null
        document.getElementById('style_item').appendChild(objectToInput(item_style[x].style, "style_keys", "style_value", "Nama Style", "Informasi Style", "table_style", false));   
      }
    }
    switch(name){
      case 'Polygon':
        options.drawPolygon = true
      break;
      case 'Polyline':
        options.drawPolyline = true
      break;
      case 'Rectangle':
        options.drawRectangle = true
      break;
      case 'Circle':
        options.drawCircle = true
      break;
      case 'Marker':
        options.drawMarker = true
      break;
    }
  }
  map.pm.addControls(options);
}

map.on('pm:create', function(e) {
  currentItemObject = e.layer;
  map.pm.disableDraw();
  switchItemDrawer(currentItemName, true)
});

map.on('pm:remove', function(e) {
  currentItemObject = null;
  switchItemDrawer(currentItemName, false)
});

@if(!detail.id_item)
  // Event listener agar mengubah peta sesuai dengan tipe item
  document.getElementsByName("tipe_item")[0].addEventListener("change", function(){
    if(currentItemObject) map.removeLayer(currentItemObject);
    switchItemDrawer(getSelectedText(this));
  });
  // Program
  switchItemDrawer('Polygon');
  
  // Membuat form informasi item
  document.getElementById('info_item').appendChild(objectToInput({Ibukota: "Jakarta"}, "info_keys", "info_value", "Nama Informasi", "Nilai Informasi", "table_info"));
  
@else
  switchItemDrawer("{{ detail.tipe_item }}", true)
  L.geoJSON({{ el(toJSON(detail.geojson)) }}, {
    onEachFeature: function(feature, layer){
      var tipe_item = "{{ detail.tipe_item }}"
      // Mengembalikan value pasca edit ke form
      document.getElementsByName("nm_item")[0].value = "{{ detail.nm_item }}"
      document.getElementsByName('kategori_item')[0].value = "{{ detail.id_kitem }}"
      
      // Mengganti action form keupdate
      document.form.action = "{{ route('PetaController.update', {id: detail.id_item}) }}?_method=PUT"
      
      // ganti judul form
      document.getElementById('judul_form').innerHTML = "Edit Item Peta";
      
      // Membuat form informasi item
      document.getElementById('info_item').appendChild(objectToInput(feature.properties.detail, "info_keys", "info_value", "Nama Informasi", "Nilai Informasi", "table_info"));
      
      // Membuat form style item
      document.getElementById('style_item').appendChild(objectToInput(feature.properties.style, "style_keys", "style_value", "Nama Style", "Informasi Style", "table_style", false));
      
      switch(tipe_item){
        case "Circle":
          currentItemObject = L.circle(layer.getLatLng(), {radius: feature.properties.radius});
          currentItemObject.setStyle(feature.properties.style);
          map.fitBounds(currentItemObject.getBounds())
        break;
        case "Marker":
          currentItemObject = L.marker(layer.getLatLng());
          currentItemObject.setIcon(L.icon({iconUrl: feature.properties.style.iconUrl, iconSize: [41, 41]}))
          map.setView(currentItemObject.getLatLng(), 11)
        break;
        default:
          currentItemObject = layer
          map.fitBounds(currentItemObject.getBounds())
      }
      
      // layer yang diedit dioper ke currentItemObject, agar tidak menjadi featurecollection
      currentItemObject.addTo(map);     
    },
    style: function(feature){
      return feature.properties.style
    }
  })
  
@endif

</script>
@endsection
